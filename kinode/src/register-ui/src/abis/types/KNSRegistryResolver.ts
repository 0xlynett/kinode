/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface KNSRegistryResolverInterface extends utils.Interface {
  functions: {
    "TLDs(bytes32)": FunctionFragment;
    "clearRecords(bytes32,uint96)": FunctionFragment;
    "getInitializedVersion()": FunctionFragment;
    "initialize()": FunctionFragment;
    "ip(bytes32)": FunctionFragment;
    "key(bytes32)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "multicallWithNodeCheck(bytes32,bytes[])": FunctionFragment;
    "nodes(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerNode(bytes)": FunctionFragment;
    "registerTLD(bytes,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routers(bytes32)": FunctionFragment;
    "setAllIp(bytes32,uint128,uint16,uint16,uint16,uint16)": FunctionFragment;
    "setDirectInfo(bytes32,uint128,uint16,uint16,uint16,uint16)": FunctionFragment;
    "setIp(bytes32,uint128)": FunctionFragment;
    "setKey(bytes32,bytes32)": FunctionFragment;
    "setRouters(bytes32,bytes32[])": FunctionFragment;
    "setTcp(bytes32,uint16)": FunctionFragment;
    "setUdp(bytes32,uint16)": FunctionFragment;
    "setWs(bytes32,uint16)": FunctionFragment;
    "setWt(bytes32,uint16)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TLDs"
      | "clearRecords"
      | "getInitializedVersion"
      | "initialize"
      | "ip"
      | "key"
      | "multicall"
      | "multicallWithNodeCheck"
      | "nodes"
      | "owner"
      | "proxiableUUID"
      | "registerNode"
      | "registerTLD"
      | "renounceOwnership"
      | "routers"
      | "setAllIp"
      | "setDirectInfo"
      | "setIp"
      | "setKey"
      | "setRouters"
      | "setTcp"
      | "setUdp"
      | "setWs"
      | "setWt"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "TLDs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "clearRecords",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializedVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ip", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "key", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallWithNodeCheck",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "nodes", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTLD",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "routers", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setAllIp",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDirectInfo",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKey",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouters",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTcp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUdp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWs",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWt",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "TLDs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializedVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "key", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multicallWithNodeCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAllIp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDirectInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTcp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUdp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IpUpdate(bytes32,uint128)": EventFragment;
    "KeyUpdate(bytes32,bytes32)": EventFragment;
    "NewTLD(bytes32,bytes,address)": EventFragment;
    "NodeRegistered(bytes32,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RecordsCleared(bytes32)": EventFragment;
    "RoutingUpdate(bytes32,bytes32[])": EventFragment;
    "TcpUpdate(bytes32,uint16)": EventFragment;
    "UdpUpdate(bytes32,uint16)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WsUpdate(bytes32,uint16)": EventFragment;
    "WtUpdate(bytes32,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IpUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTLD"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecordsCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoutingUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TcpUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UdpUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WsUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WtUpdate"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IpUpdateEventObject {
  node: string;
  ip: BigNumber;
}
export type IpUpdateEvent = TypedEvent<
  [string, BigNumber],
  IpUpdateEventObject
>;

export type IpUpdateEventFilter = TypedEventFilter<IpUpdateEvent>;

export interface KeyUpdateEventObject {
  node: string;
  key: string;
}
export type KeyUpdateEvent = TypedEvent<[string, string], KeyUpdateEventObject>;

export type KeyUpdateEventFilter = TypedEventFilter<KeyUpdateEvent>;

export interface NewTLDEventObject {
  node: string;
  name: string;
  tld: string;
}
export type NewTLDEvent = TypedEvent<
  [string, string, string],
  NewTLDEventObject
>;

export type NewTLDEventFilter = TypedEventFilter<NewTLDEvent>;

export interface NodeRegisteredEventObject {
  node: string;
  name: string;
}
export type NodeRegisteredEvent = TypedEvent<
  [string, string],
  NodeRegisteredEventObject
>;

export type NodeRegisteredEventFilter = TypedEventFilter<NodeRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RecordsClearedEventObject {
  node: string;
}
export type RecordsClearedEvent = TypedEvent<
  [string],
  RecordsClearedEventObject
>;

export type RecordsClearedEventFilter = TypedEventFilter<RecordsClearedEvent>;

export interface RoutingUpdateEventObject {
  node: string;
  routers: string[];
}
export type RoutingUpdateEvent = TypedEvent<
  [string, string[]],
  RoutingUpdateEventObject
>;

export type RoutingUpdateEventFilter = TypedEventFilter<RoutingUpdateEvent>;

export interface TcpUpdateEventObject {
  node: string;
  port: number;
}
export type TcpUpdateEvent = TypedEvent<[string, number], TcpUpdateEventObject>;

export type TcpUpdateEventFilter = TypedEventFilter<TcpUpdateEvent>;

export interface UdpUpdateEventObject {
  node: string;
  port: number;
}
export type UdpUpdateEvent = TypedEvent<[string, number], UdpUpdateEventObject>;

export type UdpUpdateEventFilter = TypedEventFilter<UdpUpdateEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WsUpdateEventObject {
  node: string;
  port: number;
}
export type WsUpdateEvent = TypedEvent<[string, number], WsUpdateEventObject>;

export type WsUpdateEventFilter = TypedEventFilter<WsUpdateEvent>;

export interface WtUpdateEventObject {
  node: string;
  port: number;
}
export type WtUpdateEvent = TypedEvent<[string, number], WtUpdateEventObject>;

export type WtUpdateEventFilter = TypedEventFilter<WtUpdateEvent>;

export interface KNSRegistryResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KNSRegistryResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TLDs(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    clearRecords(
      _node: BytesLike,
      _records: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getInitializedVersion(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ip(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        ip: BigNumber;
        ws: number;
        wt: number;
        tcp: number;
        udp: number;
      }
    >;

    key(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicallWithNodeCheck(
      node: BytesLike,
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nodes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { tld: string; records: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerNode(
      fqdn: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerTLD(
      fqdn: BytesLike,
      registrar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    routers(_node: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;

    setAllIp(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDirectInfo(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIp(
      _node: BytesLike,
      _ip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setKey(
      _node: BytesLike,
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRouters(
      _node: BytesLike,
      _newRouters: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTcp(
      _node: BytesLike,
      _tcp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUdp(
      _node: BytesLike,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWs(
      _node: BytesLike,
      _ws: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWt(
      _node: BytesLike,
      _wt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  TLDs(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  clearRecords(
    _node: BytesLike,
    _records: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getInitializedVersion(overrides?: CallOverrides): Promise<number>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ip(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number] & {
      ip: BigNumber;
      ws: number;
      wt: number;
      tcp: number;
      udp: number;
    }
  >;

  key(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicallWithNodeCheck(
    node: BytesLike,
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nodes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { tld: string; records: BigNumber }>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerNode(
    fqdn: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerTLD(
    fqdn: BytesLike,
    registrar: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  routers(_node: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  setAllIp(
    _node: BytesLike,
    _ip: BigNumberish,
    _ws: BigNumberish,
    _wt: BigNumberish,
    _tcp: BigNumberish,
    _udp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDirectInfo(
    _node: BytesLike,
    _ip: BigNumberish,
    _ws: BigNumberish,
    _wt: BigNumberish,
    _tcp: BigNumberish,
    _udp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIp(
    _node: BytesLike,
    _ip: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setKey(
    _node: BytesLike,
    _key: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRouters(
    _node: BytesLike,
    _newRouters: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTcp(
    _node: BytesLike,
    _tcp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUdp(
    _node: BytesLike,
    _udp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWs(
    _node: BytesLike,
    _ws: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWt(
    _node: BytesLike,
    _wt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    TLDs(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    clearRecords(
      _node: BytesLike,
      _records: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInitializedVersion(overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    ip(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        ip: BigNumber;
        ws: number;
        wt: number;
        tcp: number;
        udp: number;
      }
    >;

    key(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    multicallWithNodeCheck(
      node: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    nodes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { tld: string; records: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerNode(fqdn: BytesLike, overrides?: CallOverrides): Promise<string>;

    registerTLD(
      fqdn: BytesLike,
      registrar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routers(_node: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    setAllIp(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDirectInfo(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIp(
      _node: BytesLike,
      _ip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKey(
      _node: BytesLike,
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouters(
      _node: BytesLike,
      _newRouters: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTcp(
      _node: BytesLike,
      _tcp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUdp(
      _node: BytesLike,
      _udp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWs(
      _node: BytesLike,
      _ws: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWt(
      _node: BytesLike,
      _wt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "IpUpdate(bytes32,uint128)"(
      node?: BytesLike | null,
      ip?: null
    ): IpUpdateEventFilter;
    IpUpdate(node?: BytesLike | null, ip?: null): IpUpdateEventFilter;

    "KeyUpdate(bytes32,bytes32)"(
      node?: BytesLike | null,
      key?: null
    ): KeyUpdateEventFilter;
    KeyUpdate(node?: BytesLike | null, key?: null): KeyUpdateEventFilter;

    "NewTLD(bytes32,bytes,address)"(
      node?: BytesLike | null,
      name?: null,
      tld?: null
    ): NewTLDEventFilter;
    NewTLD(node?: BytesLike | null, name?: null, tld?: null): NewTLDEventFilter;

    "NodeRegistered(bytes32,bytes)"(
      node?: BytesLike | null,
      name?: null
    ): NodeRegisteredEventFilter;
    NodeRegistered(
      node?: BytesLike | null,
      name?: null
    ): NodeRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RecordsCleared(bytes32)"(
      node?: BytesLike | null
    ): RecordsClearedEventFilter;
    RecordsCleared(node?: BytesLike | null): RecordsClearedEventFilter;

    "RoutingUpdate(bytes32,bytes32[])"(
      node?: BytesLike | null,
      routers?: null
    ): RoutingUpdateEventFilter;
    RoutingUpdate(
      node?: BytesLike | null,
      routers?: null
    ): RoutingUpdateEventFilter;

    "TcpUpdate(bytes32,uint16)"(
      node?: BytesLike | null,
      port?: null
    ): TcpUpdateEventFilter;
    TcpUpdate(node?: BytesLike | null, port?: null): TcpUpdateEventFilter;

    "UdpUpdate(bytes32,uint16)"(
      node?: BytesLike | null,
      port?: null
    ): UdpUpdateEventFilter;
    UdpUpdate(node?: BytesLike | null, port?: null): UdpUpdateEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "WsUpdate(bytes32,uint16)"(
      node?: BytesLike | null,
      port?: null
    ): WsUpdateEventFilter;
    WsUpdate(node?: BytesLike | null, port?: null): WsUpdateEventFilter;

    "WtUpdate(bytes32,uint16)"(
      node?: BytesLike | null,
      port?: null
    ): WtUpdateEventFilter;
    WtUpdate(node?: BytesLike | null, port?: null): WtUpdateEventFilter;
  };

  estimateGas: {
    TLDs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    clearRecords(
      _node: BytesLike,
      _records: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getInitializedVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    ip(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    key(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicallWithNodeCheck(
      node: BytesLike,
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nodes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerNode(
      fqdn: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerTLD(
      fqdn: BytesLike,
      registrar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    routers(_node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setAllIp(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDirectInfo(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIp(
      _node: BytesLike,
      _ip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setKey(
      _node: BytesLike,
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRouters(
      _node: BytesLike,
      _newRouters: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTcp(
      _node: BytesLike,
      _tcp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUdp(
      _node: BytesLike,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWs(
      _node: BytesLike,
      _ws: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWt(
      _node: BytesLike,
      _wt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TLDs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearRecords(
      _node: BytesLike,
      _records: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getInitializedVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ip(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    key(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicallWithNodeCheck(
      node: BytesLike,
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nodes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerNode(
      fqdn: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerTLD(
      fqdn: BytesLike,
      registrar: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    routers(
      _node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllIp(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDirectInfo(
      _node: BytesLike,
      _ip: BigNumberish,
      _ws: BigNumberish,
      _wt: BigNumberish,
      _tcp: BigNumberish,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIp(
      _node: BytesLike,
      _ip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setKey(
      _node: BytesLike,
      _key: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRouters(
      _node: BytesLike,
      _newRouters: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTcp(
      _node: BytesLike,
      _tcp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUdp(
      _node: BytesLike,
      _udp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWs(
      _node: BytesLike,
      _ws: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWt(
      _node: BytesLike,
      _wt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
