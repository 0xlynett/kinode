/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface KNSEnsExitInterface extends utils.Interface {
  functions: {
    "__initTLDRegistration(bytes,bytes32)": FunctionFragment;
    "auth(bytes32,address)": FunctionFragment;
    "ensowners(uint256)": FunctionFragment;
    "kns()": FunctionFragment;
    "lz()": FunctionFragment;
    "lzReceive(uint16,bytes,uint64,bytes)": FunctionFragment;
    "lzc()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ping()": FunctionFragment;
    "setBaseNode(uint256)": FunctionFragment;
    "setEntry(address,uint16)": FunctionFragment;
    "setKNSRecords(address,bytes,bytes[])": FunctionFragment;
    "simulate(bytes)": FunctionFragment;
    "trustedentries(uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__initTLDRegistration"
      | "auth"
      | "ensowners"
      | "kns"
      | "lz"
      | "lzReceive"
      | "lzc"
      | "owner"
      | "ownerOf"
      | "ping"
      | "setBaseNode"
      | "setEntry"
      | "setKNSRecords"
      | "simulate"
      | "trustedentries"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__initTLDRegistration",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auth",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ensowners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kns", values?: undefined): string;
  encodeFunctionData(functionFragment: "lz", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "lzc", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ping", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBaseNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKNSRecords",
    values: [string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "simulate", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "trustedentries",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__initTLDRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ensowners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lz", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEntry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKNSRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedentries",
    data: BytesLike
  ): Result;

  events: {
    "Error(bytes4)": EventFragment;
    "Pinged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Error"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pinged"): EventFragment;
}

export interface ErrorEventObject {
  error: string;
}
export type ErrorEvent = TypedEvent<[string], ErrorEventObject>;

export type ErrorEventFilter = TypedEventFilter<ErrorEvent>;

export interface PingedEventObject {
  arg0: string;
}
export type PingedEvent = TypedEvent<[string], PingedEventObject>;

export type PingedEventFilter = TypedEventFilter<PingedEvent>;

export interface KNSEnsExit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KNSEnsExitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __initTLDRegistration(
      fqdn: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    auth(
      _nodeId: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ensowners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    kns(overrides?: CallOverrides): Promise<[string]>;

    lz(overrides?: CallOverrides): Promise<[string]>;

    lzReceive(
      _chain: BigNumberish,
      _path: BytesLike,
      arg2: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lzc(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      node: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ping(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBaseNode(
      node: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEntry(
      _entry: string,
      _entrychain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setKNSRecords(
      owner: string,
      fqdn: BytesLike,
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    simulate(
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    trustedentries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  __initTLDRegistration(
    fqdn: BytesLike,
    tld: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  auth(
    _nodeId: BytesLike,
    _sender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ensowners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  kns(overrides?: CallOverrides): Promise<string>;

  lz(overrides?: CallOverrides): Promise<string>;

  lzReceive(
    _chain: BigNumberish,
    _path: BytesLike,
    arg2: BigNumberish,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lzc(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    node: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ping(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setBaseNode(
    node: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEntry(
    _entry: string,
    _entrychain: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setKNSRecords(
    owner: string,
    fqdn: BytesLike,
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  simulate(
    _payload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  trustedentries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    __initTLDRegistration(
      fqdn: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    auth(
      _nodeId: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ensowners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    kns(overrides?: CallOverrides): Promise<string>;

    lz(overrides?: CallOverrides): Promise<string>;

    lzReceive(
      _chain: BigNumberish,
      _path: BytesLike,
      arg2: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    lzc(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(node: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ping(overrides?: CallOverrides): Promise<void>;

    setBaseNode(node: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEntry(
      _entry: string,
      _entrychain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKNSRecords(
      owner: string,
      fqdn: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    simulate(_payload: BytesLike, overrides?: CallOverrides): Promise<void>;

    trustedentries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Error(bytes4)"(error?: null): ErrorEventFilter;
    Error(error?: null): ErrorEventFilter;

    "Pinged(address)"(arg0?: null): PingedEventFilter;
    Pinged(arg0?: null): PingedEventFilter;
  };

  estimateGas: {
    __initTLDRegistration(
      fqdn: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    auth(
      _nodeId: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensowners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kns(overrides?: CallOverrides): Promise<BigNumber>;

    lz(overrides?: CallOverrides): Promise<BigNumber>;

    lzReceive(
      _chain: BigNumberish,
      _path: BytesLike,
      arg2: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lzc(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      node: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ping(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setBaseNode(
      node: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEntry(
      _entry: string,
      _entrychain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setKNSRecords(
      owner: string,
      fqdn: BytesLike,
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    simulate(
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    trustedentries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __initTLDRegistration(
      fqdn: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    auth(
      _nodeId: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensowners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lz(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lzReceive(
      _chain: BigNumberish,
      _path: BytesLike,
      arg2: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lzc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      node: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ping(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBaseNode(
      node: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEntry(
      _entry: string,
      _entrychain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setKNSRecords(
      owner: string,
      fqdn: BytesLike,
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    simulate(
      _payload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    trustedentries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
